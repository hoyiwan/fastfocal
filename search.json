[{"path":"https://hoyiwan.github.io/fastfocal/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 Ho Yi Wan Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://hoyiwan.github.io/fastfocal/articles/benchmark.html","id":"is-it-faster","dir":"Articles","previous_headings":"","what":"Is it faster?","title":"Benchmarking fastfocal","text":"compare fastfocal() terra::focal() across range raster sizes kernel radii. keep vignette fast CRAN, load precomputed results available provide optional code (disabled) reproduce full benchmarks locally.","code":""},{"path":"https://hoyiwan.github.io/fastfocal/articles/benchmark.html","id":"load-libraries-and-parameters","dir":"Articles","previous_headings":"","what":"Load libraries and parameters","title":"Benchmarking fastfocal","text":"","code":"library(fastfocal) library(terra) library(dplyr)  raster_sizes <- c(100, 250, 500, 1000, 2500, 5000) kernel_sizes <- seq(100, 1000, 100) replicates <- 1 res_m <- 30 crs_m <- \"EPSG:3857\" set.seed(888)"},{"path":"https://hoyiwan.github.io/fastfocal/articles/benchmark.html","id":"create-test-rasters","dir":"Articles","previous_headings":"","what":"Create test rasters","title":"Benchmarking fastfocal","text":"raster square 30 m resolution.","code":"rasters <- lapply(raster_sizes, function(size) {   ext_x <- size * res_m   ext_y <- size * res_m   r <- rast(nrows = size, ncols = size, extent = ext(0, ext_x, 0, ext_y), crs = crs_m)   values(r) <- runif(ncell(r))   r }) names(rasters) <- as.character(raster_sizes)"},{"path":"https://hoyiwan.github.io/fastfocal/articles/benchmark.html","id":"quick-peek","dir":"Articles","previous_headings":"","what":"Quick peek","title":"Benchmarking fastfocal","text":"","code":"oldpar <- par(no.readonly = TRUE) par(mfrow = c(2, 3), mar = c(2, 2, 3, 1)) raster_labels <- paste0(raster_sizes, \"x\", raster_sizes) for (i in seq_along(rasters)) {   plot(rasters[[i]], main = paste(\"Raster:\", raster_labels[i])) } par(oldpar)"},{"path":"https://hoyiwan.github.io/fastfocal/articles/benchmark.html","id":"optional-full-benchmark-disabled-for-speed","dir":"Articles","previous_headings":"","what":"Optional full benchmark (disabled for speed)","title":"Benchmarking fastfocal","text":"Note: running full grid can take . disabled keep CRAN checks fast. Uncomment run locally.","code":"grid <- expand.grid(   raster_size = raster_sizes,   d = kernel_sizes,   method = c(\"fastfocal\", \"terra\"),   stringsAsFactors = FALSE )  dir.create(\"benchmark_chunks\", showWarnings = FALSE)  benchmark_row <- function(idx) {   size <- grid$raster_size[idx]   d <- grid$d[idx]   method <- grid$method[idx]   fname <- sprintf(\"benchmark_chunks/%s_%d_%dm.csv\", method, size, d)   if (file.exists(fname)) return(NULL)   r <- rasters[[as.character(size)]]   times <- sapply(seq_len(replicates), function(i) {     t0 <- Sys.time()     if (method == \"fastfocal\") {       fastfocal(x = r, d = d, w = \"circle\", fun = \"mean\", engine = \"auto\", pad = \"auto\")     } else {       w <- focalMat(r, d, type = \"circle\")       if (all(w == 0)) return(NA_real_)       focal(r, w = w, fun = mean, na.rm = TRUE, na.policy = \"omit\")     }     as.numeric(difftime(Sys.time(), t0, units = \"secs\"))   })   chunk_df <- data.frame(method = method, raster_size = size, d = d, time = times)   write.csv(chunk_df, file = fname, row.names = FALSE) }  invisible(sapply(seq_len(nrow(grid)), benchmark_row)) # After running, you can combine chunks into a single CSV under inst/extdata/benchmark.csv"},{"path":"https://hoyiwan.github.io/fastfocal/articles/benchmark.html","id":"load-precomputed-results-with-fallback","dir":"Articles","previous_headings":"","what":"Load precomputed results (with fallback)","title":"Benchmarking fastfocal","text":"","code":"bench_path <- system.file(\"extdata\", \"benchmark.csv\", package = \"fastfocal\") if (nzchar(bench_path) && file.exists(bench_path)) {   df <- read.csv(bench_path) } else {   # Fallback tiny demo dataset for CRAN if extdata is not installed   df <- expand.grid(     method = c(\"fastfocal\", \"terra\"),     raster_size = c(250, 500, 1000),     d = c(100, 300, 500),     KEEP.OUT.ATTRS = FALSE,     stringsAsFactors = FALSE   )   set.seed(1)   df$time <- ifelse(df$method == \"fastfocal\",                     runif(nrow(df), 0.05, 0.20),                     runif(nrow(df), 0.08, 0.35)) } stopifnot(all(c(\"method\",\"raster_size\",\"d\",\"time\") %in% names(df)))"},{"path":"https://hoyiwan.github.io/fastfocal/articles/benchmark.html","id":"summarize-and-visualize","dir":"Articles","previous_headings":"","what":"Summarize and visualize","title":"Benchmarking fastfocal","text":"","code":"# --- summary --- summary_df <- df %>%    group_by(method, raster_size, d) %>%    summarize(      mean_time = mean(time, na.rm = TRUE),      se_time = sd(time, na.rm = TRUE) / sqrt(sum(is.finite(time))),      .groups = \"drop\"    ) %>%    mutate(raster_label = factor(      paste0(raster_size, \"x\", raster_size),      levels = paste0(sort(unique(df$raster_size)), \"x\", sort(unique(df$raster_size)))    ))   oldpar <- par(no.readonly = TRUE)  layout(matrix(1:6, nrow = 2, byrow = TRUE))  par(mar = c(4, 4, 3, 1))  cols <- c(\"fastfocal\" = \"#0072B2\", \"terra\" = \"#D55E00\")  raster_labels <- levels(summary_df$raster_label)   for (label in raster_labels) {    subdf <- subset(summary_df, raster_label == label)    if (nrow(subdf) == 0) next    plot(NA,         xlim = range(subdf$d),         ylim = range(subdf$mean_time + subdf$se_time, na.rm = TRUE),         xlab = \"Kernel size (m)\", ylab = \"Mean time (s)\",         main = paste(\"Raster:\", label))    methods <- unique(subdf$method)    for (m in methods) {      data <- subdf[subdf$method == m, ]      lines(data$d, data$mean_time, col = cols[m], type = \"b\", pch = 16)      max_time <- max(subdf$mean_time, na.rm = TRUE)      min_se <- 0.001 * max_time      se <- ifelse(is.na(data$se_time), 0, data$se_time)      se_final <- pmax(se, min_se)      suppressWarnings(arrows(        x0 = data$d,       y0 = data$mean_time - se_final,       x1 = data$d,        y1 = data$mean_time + se_final,        angle = 90, code = 3, length = 0.05, col = cols[m]      ))    }    legend(\"topleft\", legend = methods, col = cols[methods], pch = 16, lty = 1, bty = \"n\")  } layout(1) par(oldpar)"},{"path":"https://hoyiwan.github.io/fastfocal/articles/benchmark.html","id":"bonus-accuracy-check","dir":"Articles","previous_headings":"","what":"Bonus: accuracy check","title":"Benchmarking fastfocal","text":"Compare single case moderate size.","code":"test_r <- rasters[[\"1000\"]] kernel_d <- 500  # fastfocal r_fast <- fastfocal(test_r, d = kernel_d, w = \"circle\", fun = \"mean\", engine = \"auto\", pad = \"auto\")  # terra::focal w <- focalMat(test_r, kernel_d, type = \"circle\") r_terra <- focal(test_r, w = w, fun = mean, na.rm = TRUE, na.policy = \"omit\")  # Differences r_diff <- abs(r_fast - r_terra) v_diff <- values(r_diff)  mean_diff <- mean(v_diff, na.rm = TRUE) max_diff <- max(v_diff, na.rm = TRUE)  cat(\"Mean difference:\", round(mean_diff, 6), \"\\n\") #> Mean difference: 0 cat(\"Max difference :\", round(max_diff, 6), \"\\n\") #> Max difference : 0"},{"path":"https://hoyiwan.github.io/fastfocal/articles/benchmark.html","id":"visual-comparison","dir":"Articles","previous_headings":"Bonus: accuracy check","what":"Visual comparison","title":"Benchmarking fastfocal","text":"","code":"oldpar <- par(no.readonly = TRUE) par(mfrow = c(2, 2), mar = c(2, 2, 3, 2)) plot(test_r,   main = \"Original\", col = terrain.colors(20)) plot(r_terra,  main = \"terra::focal (500 m)\", col = terrain.colors(20)) plot(r_fast,   main = \"fastfocal (500 m)\", col = terrain.colors(20)) plot(r_diff,   main = \"Absolute difference\", col = hcl.colors(20, \"YlOrRd\", rev = TRUE)) par(oldpar)"},{"path":"https://hoyiwan.github.io/fastfocal/articles/benchmark.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Benchmarking fastfocal","text":"","code":"sessionInfo() #> R version 4.5.1 (2025-06-13) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 24.04.3 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] dplyr_1.1.4     terra_1.8-60    fastfocal_0.1.3 #>  #> loaded via a namespace (and not attached): #>  [1] vctrs_0.6.5       cli_3.6.5         knitr_1.50        rlang_1.1.6       #>  [5] xfun_0.53         generics_0.1.4    textshaping_1.0.3 jsonlite_2.0.0    #>  [9] glue_1.8.0        htmltools_0.5.8.1 ragg_1.5.0        sass_0.4.10       #> [13] rmarkdown_2.29    tibble_3.3.0      evaluate_1.0.5    jquerylib_0.1.4   #> [17] fastmap_1.2.0     yaml_2.3.10       lifecycle_1.0.4   compiler_4.5.1    #> [21] codetools_0.2-20  fs_1.6.6          pkgconfig_2.0.3   Rcpp_1.1.0        #> [25] systemfonts_1.2.3 digest_0.6.37     R6_2.6.1          tidyselect_1.2.1  #> [29] pillar_1.11.1     magrittr_2.0.4    bslib_0.9.0       tools_4.5.1       #> [33] pkgdown_2.1.3     cachem_1.1.0      desc_1.4.3"},{"path":"https://hoyiwan.github.io/fastfocal/articles/benchmark.html","id":"citation","dir":"Articles","previous_headings":"","what":"Citation","title":"Benchmarking fastfocal","text":"cite package: Wan, H. Y. (2025). fastfocal: Fast Multi-scale Raster Extraction Moving Window Analysis FFT. R package version 0.1.3. Zenodo. https://doi.org/10.5281/zenodo.17074691","code":"citation(\"fastfocal\") #> To cite fastfocal in publications, please use: #>  #>   Wan HY (2025). _fastfocal: Fast Multi-scale Raster Extraction and #>   Moving Window Analysis with FFT_. doi:10.5281/zenodo.17074691 #>   <https://doi.org/10.5281/zenodo.17074691>, R package version 0.1.3, #>   <https://hoyiwan.github.io/fastfocal/>. #>  #> A BibTeX entry for LaTeX users is #>  #>   @Manual{, #>     title = {fastfocal: Fast Multi-scale Raster Extraction and Moving Window Analysis with FFT}, #>     author = {Ho Yi Wan}, #>     year = {2025}, #>     note = {R package version 0.1.3}, #>     doi = {10.5281/zenodo.17074691}, #>     url = {https://hoyiwan.github.io/fastfocal/}, #>     publisher = {Zenodo}, #>   }"},{"path":"https://hoyiwan.github.io/fastfocal/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ho Yi Wan. Author, maintainer.","code":""},{"path":"https://hoyiwan.github.io/fastfocal/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Wan HY (2025). fastfocal: Fast Multi-scale Raster Extraction Moving Window Analysis FFT. doi:10.5281/zenodo.17074691, R package version 0.1.3, https://hoyiwan.github.io/fastfocal/.","code":"@Manual{,   title = {fastfocal: Fast Multi-scale Raster Extraction and Moving Window Analysis with FFT},   author = {Ho Yi Wan},   year = {2025},   note = {R package version 0.1.3},   doi = {10.5281/zenodo.17074691},   url = {https://hoyiwan.github.io/fastfocal/},   publisher = {Zenodo}, }"},{"path":"https://hoyiwan.github.io/fastfocal/index.html","id":"fastfocal","dir":"","previous_headings":"","what":"Fast Multiscale Raster Extraction and Moving Window Analysis with FFT","title":"Fast Multiscale Raster Extraction and Moving Window Analysis with FFT","text":"fastfocal: Fast Multi-scale Raster Extraction Moving Window Analysis Fast Fourier Transform (FFT) R fastfocal provides high-performance, flexible raster smoothing extraction functions R using moving windows, buffer-based zones, auto-switching FFT backend large kernels. supports multiple focal statistics allows users work multiple spatial scales ease.","code":""},{"path":"https://hoyiwan.github.io/fastfocal/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Fast Multiscale Raster Extraction and Moving Window Analysis with FFT","text":"accepted CRAN, able install stable release : , can install development version GitHub:","code":"install.packages(\"fastfocal\") # install.packages(\"remotes\") remotes::install_github(\"hoyiwan/fastfocal\")"},{"path":"https://hoyiwan.github.io/fastfocal/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Fast Multiscale Raster Extraction and Moving Window Analysis with FFT","text":"package includes: fastfocal() — fast moving-window smoothing support mean, sum, min, max, sd, median fastextract() — fast extraction raster values point buffer locations fastfocal_weights() — utility generating spatial weight matrices (circular, Gaussian, etc.) FFT backend currently supports sum mean; statistics use terra backend Native support terra::SpatRaster terra::SpatVector objects","code":""},{"path":"https://hoyiwan.github.io/fastfocal/index.html","id":"example-usage","dir":"","previous_headings":"","what":"Example Usage","title":"Fast Multiscale Raster Extraction and Moving Window Analysis with FFT","text":"Weighted extraction points:","code":"library(fastfocal) library(terra)  # Create a dummy raster r <- rast(nrows = 100, ncols = 100, xmin = 0, xmax = 3000, ymin = 0, ymax = 3000) values(r) <- runif(ncell(r))  # Apply fast focal smoothing with circular window of radius 300 smoothed <- fastfocal(r, d = 300, w = \"circle\", fun = \"mean\")  # Plot the result plot(smoothed) # Create SpatVector of points pts <- vect(data.frame(x = c(500, 1500), y = c(500, 2500)), geom = c(\"x\", \"y\"), crs = crs(r))  # Extract raster values in 500 m buffers around points result <- fastextract(r, pts, d = 500, fun = \"mean\") print(result)"},{"path":"https://hoyiwan.github.io/fastfocal/index.html","id":"vignettes","dir":"","previous_headings":"","what":"Vignettes","title":"Fast Multiscale Raster Extraction and Moving Window Analysis with FFT","text":"Introduction (Index) Benchmark: fastfocal vs terra::focal can also access R using:","code":"vignette(\"index\", package = \"fastfocal\")"},{"path":"https://hoyiwan.github.io/fastfocal/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Fast Multiscale Raster Extraction and Moving Window Analysis with FFT","text":"package licensed MIT License (see LICENSE file).","code":""},{"path":"https://hoyiwan.github.io/fastfocal/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Fast Multiscale Raster Extraction and Moving Window Analysis with FFT","text":"use fastfocal published work, please cite : Ho Yi Wan (2025). fastfocal: fast, energy-efficient R package focal raster operations. Version v0.1.1. Zenodo. https://doi.org/10.5281/zenodo.17074691 use BibTeX entry: can also run:","code":"@software{wan_fastfocal_2025,   author       = {Ho Yi Wan},   title        = {fastfocal: A fast, energy-efficient R package for focal raster operations},   version      = {v0.1.3},   year         = {2025},   publisher    = {Zenodo},   doi          = {10.5281/zenodo.17074691},   url          = {https://doi.org/10.5281/zenodo.17074691} } citation(\"fastfocal\")"},{"path":"https://hoyiwan.github.io/fastfocal/index.html","id":"author","dir":"","previous_headings":"","what":"Author","title":"Fast Multiscale Raster Extraction and Moving Window Analysis with FFT","text":"Ho Yi Wanhoyiwan@gmail.com","code":""},{"path":"https://hoyiwan.github.io/fastfocal/index.html","id":"purpose","dir":"","previous_headings":"","what":"Purpose","title":"Fast Multiscale Raster Extraction and Moving Window Analysis with FFT","text":"Built support large-scale ecological analysis, high-performance raster processing, reproducible landscape research workflows.","code":""},{"path":"https://hoyiwan.github.io/fastfocal/reference/fastextract.html","id":null,"dir":"Reference","previous_headings":"","what":"Fast raster extraction at points (buffered) — fastextract","title":"Fast raster extraction at points (buffered) — fastextract","text":"Extracts summary statistics SpatRaster point locations, optionally using buffered extraction custom kernel windows.","code":""},{"path":"https://hoyiwan.github.io/fastfocal/reference/fastextract.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fast raster extraction at points (buffered) — fastextract","text":"","code":"fastextract(x, y, d = 0, w = \"circle\", fun = \"mean\", na.rm = TRUE)"},{"path":"https://hoyiwan.github.io/fastfocal/reference/fastextract.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fast raster extraction at points (buffered) — fastextract","text":"x SpatRaster. Input raster (single- multi-layer). y SpatVector. Points polygons. d numeric numeric vector. Buffer radius/radii map units. w character. Window type buffer kernel d > 0 (currently passed terra; e.g., \"circle\", \"rectangle\"). fun character function. Summary function: \"mean\", \"sum\", \"min\", \"max\", \"sd\", \"median\"; user function. na.rm logical. Whether remove NAs computing summaries.","code":""},{"path":"https://hoyiwan.github.io/fastfocal/reference/fastextract.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fast raster extraction at points (buffered) — fastextract","text":"data.frame extracted values. d multiple values, rows stacked scale scale_m column indicating radius.","code":""},{"path":"https://hoyiwan.github.io/fastfocal/reference/fastextract.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fast raster extraction at points (buffered) — fastextract","text":"d > 0, buffer radius d (map units) created around point summary computed raster cells intersecting buffer. d == 0, values taken point locations (buffering). y polygon layer, summary computed polygon areas.","code":""},{"path":"https://hoyiwan.github.io/fastfocal/reference/fastextract.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fast raster extraction at points (buffered) — fastextract","text":"","code":"r <- terra::rast(nrows = 10, ncols = 10, xmin = 0, xmax = 100, ymin = 0, ymax = 100) terra::values(r) <- seq_len(terra::ncell(r))  pts <- terra::vect(   matrix(c(10, 10,            50, 50), ncol = 2, byrow = TRUE),   type = \"points\",   crs  = terra::crs(r) )  # Mean over a 20-unit circular neighborhood around each point res <- fastextract(r, pts, d = 20, w = \"circle\", fun = \"mean\") head(res) #>    lyr.1 #> 1 83.125 #> 2 50.500"},{"path":"https://hoyiwan.github.io/fastfocal/reference/fastfocal.html","id":null,"dir":"Reference","previous_headings":"","what":"Fast focal smoothing with FFT auto-switching — fastfocal","title":"Fast focal smoothing with FFT auto-switching — fastfocal","text":"Applies focal operation SpatRaster using either 'C++' backend (via terra) 'FFT' backend. Window types include rectangle, circle, gaussian, pareto, idw, exponential, triangular, cosine, logistic, cauchy, quartic, epanechnikov, may pass numeric matrix kernel.","code":""},{"path":"https://hoyiwan.github.io/fastfocal/reference/fastfocal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fast focal smoothing with FFT auto-switching — fastfocal","text":"","code":"fastfocal(   x,   d,   w = \"circle\",   fun = \"mean\",   engine = \"auto\",   na.rm = TRUE,   na.policy = c(\"omit\", \"all\"),   pad = c(\"none\", \"auto\"),   ... )"},{"path":"https://hoyiwan.github.io/fastfocal/reference/fastfocal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fast focal smoothing with FFT auto-switching — fastfocal","text":"x SpatRaster. Input raster (1+ layers). d numeric. Radius/size map units (ignored w matrix). w character numeric matrix. Window type, custom kernel matrix. fun character. One \"mean\",\"sum\",\"min\",\"max\",\"sd\",\"median\". engine character. \"auto\" (default), \"cpp\", \"fft\". na.rm logical. Remove NAs applying summary function. na.policy character. \"omit\" (default) leaves NA centers NA; \"\" fills centers neighbors exist (FFT path respects ; C++ path emulates center handling call). pad character. \"none\" \"auto\" (pad next 5-smooth sizes FFT). ... Extra args terra::focal() 'C++' path.","code":""},{"path":"https://hoyiwan.github.io/fastfocal/reference/fastfocal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fast focal smoothing with FFT auto-switching — fastfocal","text":"terra::SpatRaster geometry x.","code":""},{"path":"https://hoyiwan.github.io/fastfocal/reference/fastfocal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fast focal smoothing with FFT auto-switching — fastfocal","text":"'FFT' backend uses masked convolution proper NA semantics can pad \"5-smooth\" sizes stable speed. engine = \"auto\", function chooses 'C++' 'FFT' based simple window-size heuristic.","code":""},{"path":"https://hoyiwan.github.io/fastfocal/reference/fastfocal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fast focal smoothing with FFT auto-switching — fastfocal","text":"","code":"set.seed(1) r <- terra::rast(nrows = 12, ncols = 12, xmin = 0, xmax = 12, ymin = 0, ymax = 12) terra::values(r) <- stats::runif(terra::ncell(r))  # Mean with a small circular window (d is in map units; here res = 1) m_circ <- fastfocal(r, d = 2, w = \"circle\", fun = \"mean\")  # Same idea using a custom 3x3 box kernel (uniform mean) k3 <- matrix(1, 3, 3) m_box <- fastfocal(r, w = k3, fun = \"mean\")  # Tiny numeric summaries (keeps examples fast & quiet for CRAN) as.numeric(terra::global(m_circ, \"mean\", na.rm = TRUE)) #> [1] 0.5117419 as.numeric(terra::global(m_box,  \"mean\", na.rm = TRUE)) #> [1] 0.5094344"},{"path":"https://hoyiwan.github.io/fastfocal/reference/fastfocal_weights.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate weight matrix for focal operations using map units — fastfocal_weights","title":"Generate weight matrix for focal operations using map units — fastfocal_weights","text":"Builds unnormalized (normalized) kernel map units. Circle uses center-distance rule (include center <= d). Gaussian interprets d sigma map units truncates 3 sigma, matching terra::focalMat(..., type = \"Gauss\").","code":""},{"path":"https://hoyiwan.github.io/fastfocal/reference/fastfocal_weights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate weight matrix for focal operations using map units — fastfocal_weights","text":"","code":"fastfocal_weights(x, d, w = \"circle\", normalize = TRUE, plot = FALSE)"},{"path":"https://hoyiwan.github.io/fastfocal/reference/fastfocal_weights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate weight matrix for focal operations using map units — fastfocal_weights","text":"x SpatRaster (used resolution; assumes square pixels). d numeric. Radius map units kernels; sigma map units \"gaussian\"/\"Gauss\". w character. One : \"rectangle\",\"circle\",\"circular\",\"gaussian\",\"Gauss\",\"pareto\",\"idw\", \"exponential\",\"triangular\",\"cosine\",\"logistic\",\"cauchy\",\"quartic\",\"epanechnikov\". normalize logical. TRUE (default), scale weights sum 1. plot logical. TRUE, plots kernel.","code":""},{"path":"https://hoyiwan.github.io/fastfocal/reference/fastfocal_weights.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate weight matrix for focal operations using map units — fastfocal_weights","text":"numeric matrix weights.","code":""},{"path":"https://hoyiwan.github.io/fastfocal/reference/fastfocal_weights.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate weight matrix for focal operations using map units — fastfocal_weights","text":"","code":"# Small raster (resolution = 1 map unit) r <- terra::rast(nrows = 5, ncols = 5, xmin = 0, xmax = 5, ymin = 0, ymax = 5)  # Circle: d is a radius in map units -> here cell_radius = 2 -> 5x5 kernel Kc <- fastfocal_weights(r, d = 2, w = \"circle\", normalize = TRUE) dim(Kc)            # 5 x 5 #> [1] 5 5 round(sum(Kc), 6)  # ~1 #> [1] 1  # Gaussian: d is sigma in map units, truncated at 3 sigmas Kg <- fastfocal_weights(r, d = 1, w = \"gaussian\", normalize = TRUE) dim(Kg)            # 7 x 7 (since 2*ceil(3*sigma) + 1) #> [1] 7 7 round(sum(Kg), 6)  # ~1 #> [1] 1  # \\donttest{ # Quick visualization (kept out of CRAN's main run) fastfocal_weights(r, d = 2, w = \"circle\", normalize = TRUE, plot = TRUE)  #>            [,1]       [,2]       [,3]       [,4]       [,5] #> [1,] 0.00000000 0.00000000 0.07692308 0.00000000 0.00000000 #> [2,] 0.00000000 0.07692308 0.07692308 0.07692308 0.00000000 #> [3,] 0.07692308 0.07692308 0.07692308 0.07692308 0.07692308 #> [4,] 0.00000000 0.07692308 0.07692308 0.07692308 0.00000000 #> [5,] 0.00000000 0.00000000 0.07692308 0.00000000 0.00000000 # }"},{"path":"https://hoyiwan.github.io/fastfocal/news/index.html","id":"fastfocal-013","dir":"Changelog","previous_headings":"","what":"fastfocal 0.1.3","title":"fastfocal 0.1.3","text":"CRAN release: 2025-09-23 release represents version used generate benchmark results figures reported forthcoming manuscript.","code":""},{"path":"https://hoyiwan.github.io/fastfocal/news/index.html","id":"improvements-0-1-3","dir":"Changelog","previous_headings":"","what":"Improvements","title":"fastfocal 0.1.3","text":"Performance optimizations. Refined core routines faster runtime typical benchmark scenarios. Save restore par() oldpar <- par(.readonly = TRUE); par(oldpar) around changes. Reset layout() layout(1) used.","code":""},{"path":"https://hoyiwan.github.io/fastfocal/news/index.html","id":"citation-0-1-3","dir":"Changelog","previous_headings":"","what":"Citation","title":"fastfocal 0.1.3","text":"using fastfocal academic work, cite version : Wan, H.Y. (2025). fastfocal v0.1.3. GitHub. https://github.com/hoyiwan/fastfocal/releases/tag/v0.1.3","code":""},{"path":"https://hoyiwan.github.io/fastfocal/news/index.html","id":"fastfocal-012","dir":"Changelog","previous_headings":"","what":"fastfocal 0.1.2","title":"fastfocal 0.1.2","text":"Fix: NA-semantic parity terra::focal() na.rm=TRUE/FALSE na.policy=\"omit\"; removed speckle artifacts NA boundaries. Fix: Correct matrix orientation final transpose FFT path. Perf: Auto-padding next 5-smooth lengths (2*3*5 factors) avoid large-prime slowdowns FFTs. Rebuilt vignettes refreshed documentation. Fixed Rd markup (e.g., replaced terra \\pkg{terra}). Removed non-ASCII characters R sources roxygen; math now uses Rd math (e.g., \\eqn{\\sigma}). Added oldpar <- par(.readonly = TRUE); .exit(par(oldpar), add = TRUE) chunks modify par(...). Added .exit(layout(1), add = TRUE) chunks use layout(...). changes options() working directory examples/vignettes.","code":""},{"path":"https://hoyiwan.github.io/fastfocal/news/index.html","id":"fastfocal-011","dir":"Changelog","previous_headings":"","what":"fastfocal 0.1.1","title":"fastfocal 0.1.1","text":"First public release (submitted CRAN). Added Zenodo DOI updated citation information. Updated vignettes (index.Rmd benchmark.Rmd) correct version numbers DOI. Clarified FFT backend supports sum mean; statistics handled terra backend. README DESCRIPTION updated consistency (license MIT, DOI, installation instructions). Added inst/CITATION file citation(\"fastfocal\") prints DOI pkgdown URL.","code":""},{"path":"https://hoyiwan.github.io/fastfocal/news/index.html","id":"fastfocal-010","dir":"Changelog","previous_headings":"","what":"fastfocal 0.1.0","title":"fastfocal 0.1.0","text":"Internal development version (submitted CRAN).","code":""}]
